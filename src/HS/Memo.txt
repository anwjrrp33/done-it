[ch01. 시간복잡도]

20페이지
왜 1,000,000log(1,000,000) = 6,000,000이 아닌지??

시간복잡도는 가장 많이 중첩된 반복문을 기준으로 도출한다.



[ch02. 디버깅]



[ch03. 자료구조]

03-1. 배열과 리스트

* 배열
 - 메모리의 연속 공간에 값이 채워져 있는 형태의 자료구조.
 - 인덱스를 통해 참조할 수 있음.
 - 선언한 자료형의 값만 저장할 수 있음.

* 배열의 특징
1) 인덱스를 사용하여 값에 바로 접근 가능
2) 새로운 값을 삽입하거나 특정 인덱스의 값을 삭제하기 어려움.
   값을 삽입하거나 삭제하려면 해당 인덱스 주변에 있는 값을
   이동시키는 과정이 필요함.
3) 크기는 선언할 때 지정가능하며, 한번 선언하면 바꿀 수 없음.

* 리스트
 - 값과 포인터를 묶은 노드라는 것을 포인터로 연결한 자료구조

* 리스트의 특징
1) 인덱스가 없으므로 값에 접근하려면 Head 포인터부터 순서대로 접근해야 함.
   값에 접근하는 속도가 느림.
2) 포인터로 연결되어 있으므로 데이터를 삽입/삭제하는 연산 속도가 빠름
3) 선언할 때 크기를 별도로 지정하지 않아도 됨.
   리스트 크기는 정해져있지 않고, 크기가 변하기 쉬운 데이터를 다룰 때 적절.
4) 포인터를 저장할 공간이 필요하므로 배열보다 구조가 복잡함.


03-5. 스택과 큐

* 스택과 큐 : 배열에서 발전된 형태의 자료구조임.
스택과 큐는 구조는 비슷하나 처리 방식은 다르다.

* 스택
 - 삽입과 삭제 연산이 후입선출로 이뤄지는 자료구조
 - 후입선출은 삽입과 삭제가 한 쪽에서만 일어나는 특징
 - 용어
  위치
   - top: 삽입과 삭제가 일어나는 위치
  연산
   - push: top 위치에 새로운 데이터를 삽입하는 연산
   - pop: top 위치에 현재 있는 데이터를 삭제하고 확인하는 연산
   - peek: top 위치에 현재 있는 데이터를 단순 확인하는 연산
 - 깊이 우선 탐색(DFS), 백트래킹 종류의 코딩테스트에 효과적. 반드시 알아야함
 - 후입선출은 개념자체가 재귀 함수 알고리즘 원리와 일맥상통함

* 큐
 - 삽인과 삭제 연산이 선입선출로 이뤄지는 자료구조.
 - 선입선출은 삽입과 삭제가 양방향에서 이뤄짐
 - 용어
   - rear: 큐에서 가장 끝 데이터를 가리키는 영역
   - front: 큐에서 가장 앞 데이터를 가리키는 영역
   - add: rear 부분에 새로운 데이터를 삽입하는 연산
   - poll: front 부분에 있는 데이터를 삭제하고 확인하는 연산
   - peek: 큐의 맨 앞(front)에 있는 데이터를 확인할 때 사용하는 연산
 - 너비 우선 탐색(BFS)에서 자주 사용하므로 반드시 알아야함.

* 우선순위 큐
 - 값이 들어간 순서과 상관 없이 우선순위가 높은 데이터가 먼저 나옴
 - 큐 설정에 따라 front에 최댓값 또는 최솟값이 위치
 - 일반적으로 힙 heap을 이용해 구현하는데 트리 종류 중 하나



04. 정렬
 * 정렬 알고리즘의 정의
  - 버블: 데이터의 인접 요소끼리 비교하고, swap 연산을 수행하며
          정렬하는 방식
  - 선택: 대상에서 가장 크거나 작은 데이터를 찾아가
         선택을 반복하면서 정렬하는 방식
  - 삽입: 대상을 선택해 정렬된 영역에서 선택 데이터의 적절한 위치를 찾아
         삽입하면서 정렬하는 방식
  - 퀵: pivot 값을 선정해 해당 값을 기준으로 정렬하는 방식
  - 병합: 이미 정렬된 부분 집합들을 효율적으로 병합해 전체를 정렬하는 방식
  - 기수: 데이터의 자릿수를 바탕으로 비교해 데이터를 정렬하는 방식


04-1. 버블 정렬
 * 핵심 이론
  - 두 인접한 데이터의 크기를 비교해 정렬하는 방법.
    간단하게 구현할 순 있지만 시간 복잡도는 O(n^2)으로
    다른 정렬 알고리즘보다 속도가 느린 편.
    루프를 돌면서 인접한 데이터간의 swap 연산으로 정렬한다.
 * 정렬 과정
  ① 비교 연산이 필요한 루프 범위를 설정한다.
  ② 인접한 데이터 값을 비교한다.
  ③ swap 조건에 부합하면 swap 연산을 수행한다.
  ④ 루프 범위가 끝날 때까지 ②~③을 반복한다.
  ⑤ 정렬 영역을 설정합니다. 다음 루프를 실행할 때는 이 영역을 제외한다.
  ⑥ 비교 대상이 없을 때까지 ④~⑤를 반복한다.

04-2. 선택 정렬
 * 핵심 이론
  - 대상 데이터에서 최대/최소 데이터를 데이터가 나열된 순으로
    찾아가며 선택하는 방법.
    선택 정렬은 구현 방법이 복잡하고, 시간 복잡도도 O(n^2)으로
    효율적이지 않아 코딩테스트에서는 많이 사용하지 안흔ㄴ다.
  - 최솟값/최댓값을 찾고, 남은 정렬 부분의 가장 앞에 있는 데이터와
    swap한다.
 * 정렬 과정
  ① 남은 정렬 부분에서 최솟값 또는 최댓값을 찾는다.
  ② 남은 정렬 부분에서 가장 앞에 있는 데이터와 선택된 데이터를 swap한다.
  ③ 가장 앞에 있는 데이터의 위치를 변경해(index++) 남은 정렬 부분의 범위를 축소한다.
  ④ 전체 데이터 크기만큼 index가 커질 때까지, 즉 남은 정렬 부분이 없을 때까지 반복한다.
